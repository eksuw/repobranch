Here’s a step-by-step example demonstrating basic branch operations in Git, such as creating a branch, switching to it, adding changes, committing, and merging the branch back into the main branch.

### Scenario
Imagine you have a project and want to add a new feature without affecting the main branch. You’ll create a new branch for this feature, make changes, and merge it back when done.

### 1. Initialize Git and Create a Repository
First, initialize a Git repository (if not already done):

```bash
git init
```

### 2. Create a Branch
Start by creating a new branch to work on your feature:

```bash
git branch feature-branch
```

- **`feature-branch`** is the name of the new branch where you’ll work on the feature.

### 3. Switch to the New Branch
To work on the new branch, switch to it:

```bash
git checkout feature-branch
```

Alternatively, you can create and switch to a branch in one command:

```bash
git checkout -b feature-branch
```

### 4. Make Changes and Add Files
Now, let’s say you add a new file or make some changes in your project. For example, create a file called `feature.txt` and add some content to it.

To add the changes to Git’s staging area:

```bash
git add feature.txt
```

### 5. Commit the Changes
After staging the changes, commit them to the `feature-branch`:

```bash
git commit -m "Add feature.txt with initial content"
```

### 6. Switch Back to the Main Branch
Once you’ve completed your work on the feature branch, switch back to the `main` branch to merge your changes:

```bash
git checkout main
```

### 7. Merge the Feature Branch into Main
To bring the changes from `feature-branch` into `main`, run:

```bash
git merge feature-branch
```

If there are no conflicts, Git will merge the changes and add a merge commit.

### 8. Delete the Feature Branch (Optional)
Once the feature branch has been merged, you can delete it to keep your branch list clean:

```bash
git branch -d feature-branch
```

If the branch wasn’t fully merged, you can use a forced delete with `-D`:

```bash
git branch -D feature-branch
```

### 9. Push Changes to Remote Repository (Optional)
If you’re working with a remote repository (like GitHub), push the changes in `main`:

```bash
git push origin main
```

### Summary of Commands Used
```bash
git init                                  # Initialize a repository
git branch feature-branch                  # Create a new branch
git checkout feature-branch                # Switch to the new branch
git add feature.txt                        # Add changes
git commit -m "Add feature.txt with initial content" # Commit changes
git checkout main                          # Switch back to main branch
git merge feature-branch                   # Merge the feature branch into main
git branch -d feature-branch               # Delete the feature branch
git push origin main                       # Push changes to remote repository
```

This example shows the complete process of branching, adding changes, committing, merging, and cleaning up in Git.
